<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- ========================= Bean的命名 ============ start-->

    <!-- 指定id，必须在Ioc容器中唯一；-->
    <!-- <bean id="hello" class="spring.HelloImpl"></bean>-->

    <!-- 不指定id，只配置必须的全限定类名，由IoC容器为其生成一个标识，
    客户端必须通过接口“T getBean(Class<T> requiredType)”获取Bean；-->
    <!--<bean class="spring.HelloImpl"/>-->
    <!-- 指定name，这样name就是“标识符”，必须在Ioc容器中唯一；-->
    <!--<bean name="bean" class="spring.HelloImpl"/>-->
    <!--指定id和name，id就是标识符，而name就是别名，必须在Ioc容器中唯一；-->
    <!--<bean id="bean1" name="alias1" class="spring.HelloImpl"/>-->
    <!-- 如果id和name一样，IoC容器能检测到，并消除冲突 -->
    <!--<bean id="bean3" name="bean3" class="spring.HelloImpl"/>-->
    <!--指定多个name，多个name用“，”、“；”、“ ”分割，第一个被用作标识符，其他的（alias1、alias2、alias3）是别名，所有标识符也必须在Ioc容器中唯一；-->
    <!--<bean name="bean1;alias11,alias12;alias13 alias14" class="spring.HelloImpl"/>-->
    <!-- 当指定id时，name指定的标识符全部为别名 -->
    <!--<bean id="bean2" name="alias21;alias22" class="spring.HelloImpl"/>-->
    <!--使用<alias>标签指定别名，别名也必须在IoC容器中唯一-->
    <!--<bean name="bean" class="spring.HelloImpl"/>-->
    <!--<alias alias="alias1" name="bean"/>-->
    <!--<alias alias="alias2" name="bean"/>-->

    <!-- ========================= Bean的命名 ============ end-->

    <!-- ========================= 实例化Bean ============ start-->

    <!--&lt;!&ndash;使用默认构造参数&ndash;&gt;-->
    <!--<bean name="bean1" class="spring.HelloImpl2"/>-->
    <!--&lt;!&ndash;使用有参数构造参数&ndash;&gt;-->

    <!--<bean name="bean2" class="spring.HelloImpl2">-->
        <!--&lt;!&ndash; 指定构造器参数 &ndash;&gt;-->
        <!--<constructor-arg index="0" value="Hello Spring!"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash; 使用静态工厂方法 &ndash;&gt;-->
    <!--<bean id="bean3" class="spring.factory.HelloApiStaticFactory" factory-method="newInstance">-->
        <!--<constructor-arg index="0" value="Hello Spring!"/>-->
    <!--</bean>-->

    <!--&lt;!&ndash;1、定义实例工厂Bean &ndash;&gt;-->
    <!--<bean id="beanInstanceFactory"-->
          <!--class="spring.factory.HelloApiInstanceFactory"/>-->
    <!--&lt;!&ndash;2、使用实例工厂Bean创建Bean&ndash;&gt;-->
    <!--<bean id="bean4"-->
          <!--factory-bean="beanInstanceFactory"-->
          <!--factory-method="newInstance">-->
        <!--<constructor-arg index="0" value="Hello Spring!"></constructor-arg>-->
    <!--</bean>-->
    <!-- ========================= 实例化Bean ============ end-->

    <!-- ========================= 构造器注入参数注入 ============ start-->

    <!--&lt;!&ndash; 通过构造器参数索引方式依赖注入 &ndash;&gt;-->
    <!--<bean id="byIndex" class="spring.HelloImpl3">-->
        <!--<constructor-arg index="0" value="Hello World!"/>-->
        <!--<constructor-arg index="1" value="1"/>-->
    <!--</bean>-->
    <!--&lt;!&ndash; 通过构造器参数类型方式依赖注入 &ndash;&gt;-->
    <!--<bean id="byType" class="spring.HelloImpl3">-->
        <!--<constructor-arg type="java.lang.String" value="Hello World!"/>-->
        <!--<constructor-arg type="int" value="2"/>-->
    <!--</bean>-->
    <!--&lt;!&ndash; 通过构造器参数名称方式依赖注入 &ndash;&gt;-->
    <!--<bean id="byName" class="spring.HelloImpl3">-->
        <!--<constructor-arg name="message" value="Hello World!"/>-->
        <!--<constructor-arg name="index" value="3"/>-->
    <!--</bean>-->

    <!-- ========================= 构造器注入参数注入 ============ end-->

    <!-- ========================= 静态工厂注入参数注入 ============ start-->
    <!--<bean id="byIndex"-->
          <!--class="spring.factory.DependencyInjectByStaticFactory" factory-method="newInstance">-->
        <!--<constructor-arg index="0" value="Hello World!"/>-->
        <!--<constructor-arg index="1" value="1"/>-->
    <!--</bean>-->
    <!--<bean id="byType"-->
          <!--class="spring.factory.DependencyInjectByStaticFactory" factory-method="newInstance">-->
        <!--<constructor-arg type="java.lang.String" value="Hello World!"/>-->
        <!--<constructor-arg type="int" value="2"/>-->
    <!--</bean>-->
    <!--<bean id="byName"-->
          <!--class="spring.factory.DependencyInjectByStaticFactory" factory-method="newInstance">-->
        <!--<constructor-arg name="message" value="Hello World!"/>-->
        <!--<constructor-arg name="index" value="3"/>-->
    <!--</bean>-->
    <!-- ========================= 静态工厂注入参数注入 ============ start-->

    <!-- ========================= 实例工厂注入参数注入 ============ start-->
    <!--<bean id="instanceFactory" class="spring.factory.DependencyInjectByInstanceFactory"/>-->
    <!--<bean id="byIndex" factory-bean="instanceFactory" factory-method="newInstance">-->
        <!--<constructor-arg index="0" value="Hello World!"/>-->
        <!--<constructor-arg index="1" value="1"/>-->
    <!--</bean>-->
    <!--<bean id="byType"-->
          <!--factory-bean="instanceFactory" factory-method="newInstance">-->
        <!--<constructor-arg type="java.lang.String" value="Hello World!"/>-->
        <!--<constructor-arg type="int" value="2"/>-->
    <!--</bean>-->
    <!--<bean id="byName"-->
          <!--factory-bean="instanceFactory" factory-method="newInstance">-->
        <!--<constructor-arg name="message" value="Hello World!"/>-->
        <!--<constructor-arg name="index" value="3"/>-->
    <!--</bean>-->
    <!-- ========================= 实例工厂注入参数注入 ============ end-->

    <!-- ========================= setter参数注入 ============ start-->
    <!-- 通过setter方式进行依赖注入 -->
    <!--<bean id="bean" class="spring.HelloImpl4">-->
        <!--<property name="message" value="Hello World!"/>-->
        <!--<property name="index">-->
            <!--<value>1</value>-->
        <!--</property>-->
    <!--</bean>-->
    <!-- ========================= setter参数注入 ============ end-->

    <!-- ========================= 常量注入 ============ start-->
    <!-- boolean参数值可以用on/off -->
    <!--<bean id="bean2" class="spring.bean.BooleanTestBean">-->
        <!--<property name="success" value="on"/>-->
    <!--</bean>-->
    <!--&lt;!&ndash; boolean参数值可以用yes/no &ndash;&gt;-->
    <!--<bean id="bean3" class="spring.bean.BooleanTestBean">-->
        <!--<property name="success" value="yes"/>-->
    <!--</bean>-->
    <!--&lt;!&ndash; boolean参数值可以用1/0 &ndash;&gt;-->
    <!--<bean id="bean4" class="spring.bean.BooleanTestBean">-->
        <!--<property name="success" value="1"/>-->
    <!--</bean>-->
    <!-- ========================= 常量注入 ============ end-->

    <!-- ========================= id注入 ============ start-->
    <!--<bean id="bean1" class="java.lang.String">-->
        <!--<constructor-arg index="0" value="test"/>-->
    <!--</bean>-->
    <!--<bean id="bean2" class="java.lang.String">-->
        <!--<constructor-arg index="0" value="test"/>-->
    <!--</bean>-->
    <!--<bean id="idrefBean1" class="spring.bean.IdRefTestBean">-->
        <!--<property name="id"><idref bean="bean1"/></property>-->
    <!--</bean>-->
    <!--<bean id="idrefBean2" class="spring.bean.IdRefTestBean">-->
        <!--<property name="id"><idref bean="bean2"/></property>-->
    <!--</bean>-->
    <!-- ========================= id注入 ============ end-->

    <!-- ========================= list注入 ============ start-->
    <!--<bean id="listBean" class="spring.bean.ListTestBean">-->
        <!--<property name="values">-->
            <!--<list>-->
                <!--<value>1</value>-->
                <!--<value>2</value>-->
                <!--<value>3</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->
    <!-- ========================= list注入 ============ end-->

    <!-- ========================= 注入其他bean ============ start-->
    <!-- 定义依赖Bean -->
    <!--<bean id="helloApi" class="spring.HelloImpl"/>-->
    <!--&lt;!&ndash; 通过构造器注入 &ndash;&gt;-->
    <!--<bean id="bean1" class="spring.HelloApiDecorator">-->
        <!--<constructor-arg index="0" ref="helloApi"/>-->
    <!--</bean>-->
    <!--&lt;!&ndash; 通过构造器注入 &ndash;&gt;-->
    <!--<bean id="bean2" class="spring.HelloApiDecorator">-->
        <!--<property name="helloApi"><ref bean="helloApi"/></property>-->
    <!--</bean>-->
    <!-- ========================= 注入其他bean ============ end-->

    <!-- ========================= 注入父bean，bean的name可以重名 ============ start-->
    <!-- sources/chapter3/localBeanInject.xml表示当前容器配置-->
    <!-- 注意父容器中也定义了id 为 helloApi的Bean -->
    <!--<bean id="helloApi" class="spring.HelloImpl4">-->
        <!--<property name="index" value="1"/>-->
        <!--<property name="message" value="Hello Local!"/>-->
    <!--</bean>-->
    <!--&lt;!&ndash; 通过local注入 &ndash;&gt;-->
    <!--<bean id="bean1" class="spring.HelloApiDecorator">-->
        <!--<constructor-arg index="0"><ref bean="helloApi"/></constructor-arg>-->
    <!--</bean>-->
    <!--&lt;!&ndash; 通过parent注入 &ndash;&gt;-->
    <!--<bean id="bean2" class="spring.HelloApiDecorator">-->
        <!--<property name="helloApi"><ref parent="helloApi"/></property>-->
    <!--</bean>-->
    <!-- ========================= 注入父bean，bean的name可以重名 ============ end-->

    <!-- ========================= 内部Bean定义 ============ start-->


    <!-- ========================= 内部Bean定义 ============ end-->




</beans>

























